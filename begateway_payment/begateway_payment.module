<?php
require_once(dirname(__FILE__) . '/include/begateway_payment.capture.inc');
require_once(dirname(__FILE__) . '/include/begateway_payment.refund.inc');
require_once(dirname(__FILE__) . '/include/begateway_payment.void.inc');
/**
 * Implements hook_menu().
 *
 * @return array
 */
function begateway_payment_menu() {
  $items = array();

  $items['admin/config/%/begateway_payment/refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('begateway_refund_form', 2),
    'access callback' => TRUE,
  );
  $items['admin/config/%/begateway_payment/capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('begateway_capture_form', 2),
    'access callback' => TRUE,
  );
  $items['admin/config/%/begateway_payment/void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('begateway_void_form', 2),
    'access callback' => TRUE,
  );
  $items['admin/config/begateway_payment/orders'] = array(
    'title' => 'beGateway orders',
    'description' => 'List of beGateway orders',
    'page callback' => 'begateway_payment_table',
    'access callback' => 'user_access',
    'access arguments' => array('administer begateway payments'),
    'weight' => 10,
  );
  $items['begateway_payment/route/%'] = array(
    'page callback' => 'begateway_payment_notification',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Build page with table.
 *
 * @return null|string
 * @throws \Exception
 */
function begateway_payment_table() {

  $header = array(
    t('Id'),
    t('Order Id'),
    t('Created'),
    t('Name/Email'),
    t('Remote UID'),
    t('Payment method'),
    t('Price'),
    t('Type'),
    t('Status'),
    t('Operation'),
  );
  $rows = array();
  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'order_id',
    'created',
    'uid',
    'parent_uid',
    'payment_method',
    'price',
    'types',
    'status',
    'flag',
    'types',
    'parent_uid'
  ))->execute();

  while ($value = $query->fetchAssoc()) {

    $date = format_date($value['created'], 'custom', 'Y-m-d - H:i:s');

    $title2 = '';
    $void_link = '';
    $title = '';
    $refund_capture_link = '';

    if ($value['flag'] != '0') {
      if ($value['types'] == 'authorization') {

        if ($value['status'] == 'successful' || $value['status'] == 'captured') {
          $title = t('Refund');
          $refund_capture_link = 'admin/config/' . $value['id'] . '/begateway_payment/refund';

        }
        else {
          $title = t('Capture');
          $refund_capture_link = 'admin/config/' . $value['id'] . '/begateway_payment/capture';

          $title2 = t('Void');
          $void_link = 'admin/config/' . $value['id'] . '/begateway_payment/void';
        }

      }
      else {
        $title = t('Refund');
        $refund_capture_link = 'admin/config/' . $value['id'] . '/begateway_payment/refund';

      }
    }

    if ($value['flag'] == '2') {
      $title2 = '';
      $void_link = '';
      $title = t('Refund');
      $refund_capture_link = 'admin/config/' . $value['id'] . '/begateway_payment/refund';
    }
    elseif ($value['flag'] == '3') {

      $title = t('Capture');
      $refund_capture_link = 'admin/config/' . $value['id'] . '/begateway_payment/capture';

    }

    $ow = entity_metadata_wrapper('commerce_order', $value['order_id']);
    $order_total = $ow->commerce_order_total->value();
    $user = entity_metadata_wrapper('user', $value['uid']);
    $actions = l($title, $refund_capture_link) . '<br />' . l($title2, $void_link);

    if ($value['payment_method'] != 'credit_card') {
      $actions = t('Not available');
    }

    $rows[] = array(
      $value['id'],
      l(t('Commerce order: @id', array('@id' => $value['order_id'])), 'admin/commerce/orders/' . $value['order_id']),
      $date,
      l($user->name->value(), 'user/' . $user->uid->value()) . '<br />' . $user->mail->value(),
      $value['parent_uid'],
      $value['payment_method'],
      'Order amount: ' . commerce_currency_format($order_total['amount'], $order_total['currency_code']),
      t($value['types']),
      t($value['status']),
      $actions
    );

  }

  if (!count($rows)) {
    return t('There are no orders yet. Please create one.');
  }
  else {
    return theme('table', array('header' => $header, 'rows' => $rows));
  }

}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form
 */
function begateway_payment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'commerce_checkout_form_review') {
    $payment = commerce_payment_method_instance_load('begateway|commerce_payment_begateway');
    if (isset($form['commerce_payment']['payment_method']['#options']['begateway|commerce_payment_begateway'])) {
      $form['commerce_payment']['payment_method']['#options']['begateway|commerce_payment_begateway'] = t($payment['settings']['begateway_name']);
    }
  }
}

/**
 * Returns the default settings for the beGateway payment method.
 *
 * @return array
 */
function commerce_begateway_default_settings() {
  return array(
    'begateway_name' => 'beGateway',
    'begateway_shop_id' => '',
    'begateway_shop_key' => '',
    'begateway_payment_gateway_url' => '',
    'begateway_checkout_page_url' => '',
    'type_transaction' => '',
    'card_enable' => '0',
    'erip_enable' => '1',
    'erip_service_no' => '99999999',
    'order_expiry_days' => '3'
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * @return array
 */
function begateway_payment_commerce_payment_method_info() {

  $payment = begateway_payment_method_load();

  return array(
    'begateway' => array(
      'title' => isset($payment['settings']['begateway_name']) ? $payment['settings']['begateway_name'] : 'beGateway',
      'display_title' => isset($payment['settings']['begateway_name']) ? $payment['settings']['begateway_name'] : 'beGateway',
      'description' => isset($payment['settings']['begateway_name']) ? $payment['settings']['begateway_name'] : 'beGateway',
      'active' => TRUE,
      'terminal' => TRUE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
    ),
  );
}

/**
 * Payment method callback: settings form.
 *
 * @param null $settings
 * @return array
 */
function begateway_settings_form($settings = NULL) {
  $settings = (array) $settings + commerce_begateway_default_settings();
  $form = array();

  $form['begateway_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Display payment name'),
    '#required' => TRUE,
    '#default_value' => $settings['begateway_name'],
  );
  $form['begateway_shop_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Shop ID'),
    '#required' => TRUE,
    '#default_value' => $settings['begateway_shop_id'],
  );
  $form['begateway_shop_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Shop Key'),
    '#default_value' => $settings['begateway_shop_key'],
    '#required' => TRUE,
  );
  $form['begateway_payment_gateway_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment gateway domain'),
    '#default_value' => $settings['begateway_payment_gateway_url'],
    '#required' => TRUE,

  );
  $form['begateway_checkout_page_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Checkout page domain'),
    '#default_value' => $settings['begateway_checkout_page_url'],
    '#required' => TRUE,
  );
  $form['type_transaction'] = array(
    '#type' => 'radios',
    '#title' => t('Type transaction'),
    '#default_value' => $settings['type_transaction'],
    '#options' => array(
      t('Payment'),
      t('Authorization'),
    )
  );

  $days = array();
  for ($i=1;$i<32;$i++) {
    $days[$i] = $i;
  }

  $form['order_expiry_days'] = array(
    '#type' => 'select',
    '#title' => t('How many days order is valid for payment'),
    '#options' => $days,
    '#default_value' => $settings['order_expiry_days']
  );
  $form['card_enable'] = array(
    '#type' => 'radios',
    '#title' => t('Enable bankcard payments'),
    '#default_value' => $settings['card_enable'],
    '#options' => array(
      t('Yes'),
      t('No'),
    )
  );
  $form['erip_enable'] = array(
    '#type' => 'radios',
    '#title' => t('Enable ERIP'),
    '#default_value' => $settings['erip_enable'],
    '#options' => array(
      t('Yes'),
      t('No'),
    )
  );
  $form['erip_service_no'] = array(
    '#type' => 'textfield',
    '#title' => t('ERIP service No'),
    '#default_value' => $settings['erip_service_no'],
  );

  return $form;
}

/**
 * Payment method callback: payment redirect form.
 *
 * @param $form
 * @param $form_state
 * @param $order
 * @param $payment_method
 * @return mixed
 */
function begateway_redirect_form($form, &$form_state, $order, $payment_method) {

  global $language;

  $ow = entity_metadata_wrapper('commerce_order', $order->order_id);
  $balance = commerce_payment_order_balance($order);

  // Prepare the billing address for use in the request.
  $billing_address = $ow->commerce_customer_billing->commerce_customer_address->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  $settings = begateway_payment_method_load($payment_method);
  $settings = $settings['settings'];

  $transaction = new \beGateway\GetPaymentToken;

  if ($settings['type_transaction'] != 0) {
    $transaction->setAuthorizationTransactionType();
  }
  else {
    $transaction->setPaymentTransactionType();
  }

  $notification_url = url('begateway_payment/route/' . $order->order_number, array('absolute' => TRUE));
  $notification_url = str_replace('carts.local', 'webhook.begateway.com:8443', $notification_url);
  $cancel_url = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  $transaction->money->setCents($balance['amount']);
  $transaction->money->setCurrency($balance['currency_code']);
  $transaction->setDescription(t('Order #') . $order->order_number);
  $transaction->setLanguage($language->language);
  $transaction->setNotificationUrl($notification_url);
  $transaction->setSuccessUrl(url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
  $transaction->setDeclineUrl(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
  $transaction->setFailUrl(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
  $transaction->setCancelUrl($cancel_url);
  $transaction->setTrackingId($order->order_id);
  $transaction->setExpiryDate(date("Y-m-d", ($settings['order_expiry_days']+1)*24*3600 + time()));
  $transaction->customer->setFirstName($billing_address['first_name']);
  $transaction->customer->setLastName($billing_address['last_name']);
  $transaction->customer->setCountry($billing_address['country']);
  $transaction->customer->setAddress($billing_address['thoroughfare']);
  $transaction->customer->setCity($billing_address['locality']);
  $transaction->customer->setZip($billing_address['postal_code']);
  $transaction->customer->setEmail($ow->mail->value());

  if (in_array($billing_address['country'], array('US', 'CA'))) {
    $transaction->customer->setState($billing_address['administrative_area']);
  }

  if ($settings['card_enable'] == 0) {
    $cc = new \beGateway\PaymentMethod\CreditCard;
    $transaction->addPaymentMethod($cc);
  }

  if ($settings['erip_enable'] == 0) {
    $erip = new \beGateway\PaymentMethod\Erip(array(
      'order_id' => $order->order_number,
      'account_number' => strval($order->order_number),
      'service_no' => $settings['erip_service_no']
    ));
    $transaction->addPaymentMethod($erip);
  }

  $transaction->setEmailReadonly();
  $transaction->setAddressHidden();

  $response2 = $transaction->submit();

  if ($response2->isSuccess()) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#weight' => 100,
      '#value' => t('Go to payment'),
    );

    $form['#action'] = $response2->getRedirectUrl();
  } else {
    watchdog('commerce_payment_begateway', 'The website failed to get a payment token', array(), WATCHDOG_ERROR);
    drupal_set_message(t('The payment gateway is currently unavailable, please chose another payment method, or contact an administrator.'), 'error');
    drupal_set_message($response2->getMessage(),'error');
    commerce_payment_redirect_pane_previous_page($order, t('The payment gateway is currently unavailable, please chose another payment method, or contact an administrator.'));
  }
  return $form;
}

/**
 * Handling Notification_URL.
 *
 * @throws \Exception
 */
function begateway_payment_notification() {
  $order_id = arg(2);

  $ow = entity_metadata_wrapper('commerce_order', $order_id);

  $payment = begateway_payment_method_load();

  $webhook = new \beGateway\Webhook;

  if ($webhook->isAuthorized() && $webhook->isSuccess() && (int)$webhook->getTrackingId() == (int)$order_id) {

    $transaction = commerce_payment_transaction_new('begateway', $order_id);
    $transaction->instance_id = $payment['instance_id'];
    $transaction->amount = $ow->commerce_order_total->amount->value();
    $transaction->currency_code = $ow->commerce_order_total->currency_code->value();

    if ($payment['settings']['type_transaction'] != 0) {
      $transaction->remote_status = 'pending';
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    }
    else {
      $transaction->remote_status = 'paid';
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $ow->status = 'completed';
      $ow->save();
    }

    $transaction->remote_id = $webhook->getUid();
    $transaction->message = t('Payment method') . ': ' . $webhook->getPaymentMethod() . '. ' . t('The payment has been completed.');
    commerce_payment_transaction_save($transaction);

    if ($payment['settings']['type_transaction'] != 0) {
      $query = db_insert('begateway_payments')->fields(array(
        'order_id' => $order_id,
        'created' => time(),
        'uid' => $ow->uid->value(),
        'price' => $ow->commerce_order_total->amount->value(),
        'parent_uid' => $webhook->getUid(),
        'payment_method' => $webhook->getPaymentMethod(),
        'status' => 'pending',
        'types' => 'authorization',
        'flag' => '1',
      ))->execute();
    }
    else {
      $query = db_insert('begateway_payments')->fields(array(
        'order_id' => $order_id,
        'created' => time(),
        'uid' => $ow->uid->value(),
        'price' => $ow->commerce_order_total->amount->value(),
        'parent_uid' => $webhook->getUid(),
        'payment_method' => $webhook->getPaymentMethod(),
        'status' => 'paid',
        'types' => 'payment',
        'flag' => '1',
      ))->execute();
    }
  }
  if ($webhook->getStatus() == 'expired' && (int)$webhook->getTrackingId() == (int)$order_id) {
    $ow->status = 'canceled';
    $ow->save();
  }
}

/**
* load payment method
**/
function begateway_payment_method_load($payment_method = NULL) {

  libraries_load('beGateway');

  $payment = $payment_method;

  if ($payment_method == NULL) {
    $payment = commerce_payment_method_instance_load('begateway|commerce_payment_begateway');

    if (!isset($payment['settings']['begateway_shop_id'])) {
      $payment = commerce_payment_method_instance_load('begateway|rules_begateway');
    }
  }
  \beGateway\Settings::$shopKey = $payment['settings']['begateway_shop_key'];
  \beGateway\Settings::$shopId = $payment['settings']['begateway_shop_id'];
  \beGateway\Settings::$gatewayBase = 'https://' . $payment['settings']['begateway_payment_gateway_url'];
  \beGateway\Settings::$checkoutBase = 'https://' . $payment['settings']['begateway_checkout_page_url'];

  return $payment;
}

function begateway_get_order($order_id) {

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'payment_method',
    'price',
    'flag',
    'status',
    'order_id'
  ))->condition('t.id', (int)$order_id)->execute();
  $value = $query->fetchAssoc();

  return $value;
}

/**
 * Implements hook_libraries_info().
 *
 * @return mixed
 */
function begateway_payment_libraries_info() {
  $libraries['beGateway'] = array(
    'name' => 'beGateway library php',
    'vendor url' => 'https://github.com/beGateway/begateway-api-php/tree/master',
    'download url' => 'https://github.com/beGateway/begateway-api-php/tree/master',
    'version arguments' => array(
      'file' => 'VERSION',
      'pattern' => '/^(.+)/'
    ),
    'files' => array(
      'php' => array(
        'lib/beGateway.php',
      ),
    ),
  );
  return $libraries;
}
